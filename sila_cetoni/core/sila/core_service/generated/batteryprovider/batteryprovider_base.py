# Generated by sila2.code_generator; sila2.__version__: 0.8.0
from __future__ import annotations

from abc import ABC
from queue import Queue
from typing import TYPE_CHECKING, Optional

from sila2.server import FeatureImplementationBase, MetadataDict

if TYPE_CHECKING:
    from sila2.server import SilaServer


class BatteryProviderBase(FeatureImplementationBase, ABC):

    _BatteryVoltage_producer_queue: Queue[float]

    def __init__(self, parent_server: SilaServer):
        """
        Provides information on the battery state
        """
        super().__init__(parent_server=parent_server)

        self._BatteryVoltage_producer_queue = Queue()

    def update_BatteryVoltage(self, BatteryVoltage: float, queue: Optional[Queue[float]] = None):
        """
        The current voltage of the battery

        This method updates the observable property 'BatteryVoltage'.
        """
        if queue is None:
            queue = self._BatteryVoltage_producer_queue
        queue.put(BatteryVoltage)

    def BatteryVoltage_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[float]]:
        """
        The current voltage of the battery

        This method is called when a client subscribes to the observable property 'BatteryVoltage'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass
