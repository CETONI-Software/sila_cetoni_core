# Generated by sila2.code_generator; sila2.__version__: 0.8.0
from __future__ import annotations

from abc import ABC, abstractmethod
from queue import Queue
from typing import TYPE_CHECKING, Optional

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstance

from .batteryservice_types import PerformBatteryReplacement_Responses

if TYPE_CHECKING:
    from sila2.server import SilaServer


class BatteryServiceBase(FeatureImplementationBase, ABC):

    _IsConnected_producer_queue: Queue[bool]

    _BatteryVoltage_producer_queue: Queue[float]

    _BatteryTemperature_producer_queue: Queue[float]

    _LockingPinState_producer_queue: Queue[str]

    def __init__(self, parent_server: SilaServer):
        """
        Provides information on the state of a battery and allows initiating a battery replacement routine
        """
        super().__init__(parent_server=parent_server)

        self._IsConnected_producer_queue = Queue()

        self._BatteryVoltage_producer_queue = Queue()

        self._BatteryTemperature_producer_queue = Queue()

        self._LockingPinState_producer_queue = Queue()

    def update_IsConnected(self, IsConnected: bool, queue: Optional[Queue[bool]] = None):
        """
        Whether the battery is currently connected. If it is not connected the voltage and temperature values are probably not correct.

        This method updates the observable property 'IsConnected'.
        """
        if queue is None:
            queue = self._IsConnected_producer_queue
        queue.put(IsConnected)

    def IsConnected_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[bool]]:
        """
        Whether the battery is currently connected. If it is not connected the voltage and temperature values are probably not correct.

        This method is called when a client subscribes to the observable property 'IsConnected'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def update_BatteryVoltage(self, BatteryVoltage: float, queue: Optional[Queue[float]] = None):
        """
        The current voltage of the battery

        This method updates the observable property 'BatteryVoltage'.
        """
        if queue is None:
            queue = self._BatteryVoltage_producer_queue
        queue.put(BatteryVoltage)

    def BatteryVoltage_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[float]]:
        """
        The current voltage of the battery

        This method is called when a client subscribes to the observable property 'BatteryVoltage'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def update_BatteryTemperature(self, BatteryTemperature: float, queue: Optional[Queue[float]] = None):
        """
        The current temperature of the battery block

        This method updates the observable property 'BatteryTemperature'.
        """
        if queue is None:
            queue = self._BatteryTemperature_producer_queue
        queue.put(BatteryTemperature)

    def BatteryTemperature_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[float]]:
        """
        The current temperature of the battery block

        This method is called when a client subscribes to the observable property 'BatteryTemperature'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def update_LockingPinState(self, LockingPinState: str, queue: Optional[Queue[str]] = None):
        """
        The state of the locking pin that holds the battery in its place

        This method updates the observable property 'LockingPinState'.
        """
        if queue is None:
            queue = self._LockingPinState_producer_queue
        queue.put(LockingPinState)

    def LockingPinState_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[str]]:
        """
        The state of the locking pin that holds the battery in its place

        This method is called when a client subscribes to the observable property 'LockingPinState'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    @abstractmethod
    def PerformBatteryReplacement(
        self, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> PerformBatteryReplacement_Responses:
        """
        Performs the battery replacement routine, i.e. unlocks the battery block, waits until the old battery has been removed and the new one has been inserted and locks the battery block again.


        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        """
        pass
