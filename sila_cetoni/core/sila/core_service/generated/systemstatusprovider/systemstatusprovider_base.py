# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC
from queue import Queue
from typing import TYPE_CHECKING, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict

if TYPE_CHECKING:
    from ...server import Server


class SystemStatusProviderBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _SystemState_producer_queue: Queue[Union[str, Exception]]
    _SystemState_current_value: str

    def __init__(self, parent_server: Server):
        """
        Provides information about the overall system, e.g. if the system is operational or not
        """
        super().__init__(parent_server=parent_server)

        self._SystemState_producer_queue = Queue()

    def update_SystemState(self, SystemState: str, queue: Optional[Queue[str]] = None) -> None:
        """
        The state of the system, e.g. if the system is operational or not. 'Operational' means that the system can process Commands and that all Property values are read from the device. 'Stopped' means that the system is unable to process Commands (i.e. all Execution will result in errors) and that Property values are not read from the device and might have outdated values.

        This method updates the observable property 'SystemState'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._SystemState_producer_queue
            self._SystemState_current_value = SystemState
        queue.put(SystemState)

    def SystemState_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[str]]:
        """
        The state of the system, e.g. if the system is operational or not. 'Operational' means that the system can process Commands and that all Property values are read from the device. 'Stopped' means that the system is unable to process Commands (i.e. all Execution will result in errors) and that Property values are not read from the device and might have outdated values.

        This method is called when a client subscribes to the observable property 'SystemState'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def abort_SystemState_subscriptions(self, error: Exception, queue: Optional[Queue[str]] = None) -> None:
        """
        The state of the system, e.g. if the system is operational or not. 'Operational' means that the system can process Commands and that all Property values are read from the device. 'Stopped' means that the system is unable to process Commands (i.e. all Execution will result in errors) and that Property values are not read from the device and might have outdated values.

        This method aborts subscriptions to the observable property 'SystemState'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._SystemState_producer_queue
        queue.put(error)

    @property
    def current_SystemState(self) -> str:
        try:
            return self._SystemState_current_value
        except AttributeError:
            raise AttributeError("Observable property SystemState has never been set")
