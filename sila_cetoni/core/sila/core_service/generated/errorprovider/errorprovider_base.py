# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from queue import Queue
from typing import TYPE_CHECKING, List, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict

from .errorprovider_types import ClearAllErrors_Responses

if TYPE_CHECKING:
    from ...server import Server


class ErrorProviderBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _Errors_producer_queue: Queue[Union[List[Error], Exception]]
    _Errors_current_value: List[Error]

    _LastError_producer_queue: Queue[Union[Error, Exception]]
    _LastError_current_value: Error

    def __init__(self, parent_server: Server):
        """
        This feature provides global error functionality that a client can subscribe to to get notified about any errors of the server without having to execute a Command, read a Property or (re-)start a Property subscription.
        """
        super().__init__(parent_server=parent_server)

        self._Errors_producer_queue = Queue()

        self._LastError_producer_queue = Queue()

    def update_Errors(self, Errors: List[Error], queue: Optional[Queue[List[Error]]] = None) -> None:
        """
        The list of errors that occurred during the lifetime of this server or since the last time ClearAllErrors was called.

        This method updates the observable property 'Errors'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._Errors_producer_queue
            self._Errors_current_value = Errors
        queue.put(Errors)

    def Errors_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[List[Error]]]:
        """
        The list of errors that occurred during the lifetime of this server or since the last time ClearAllErrors was called.

        This method is called when a client subscribes to the observable property 'Errors'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def abort_Errors_subscriptions(self, error: Exception, queue: Optional[Queue[List[Error]]] = None) -> None:
        """
        The list of errors that occurred during the lifetime of this server or since the last time ClearAllErrors was called.

        This method aborts subscriptions to the observable property 'Errors'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._Errors_producer_queue
        queue.put(error)

    @property
    def current_Errors(self) -> List[Error]:
        try:
            return self._Errors_current_value
        except AttributeError:
            raise AttributeError("Observable property Errors has never been set")

    def update_LastError(self, LastError: Error, queue: Optional[Queue[Error]] = None) -> None:
        """
        The most recent error that occurred.

        This method updates the observable property 'LastError'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._LastError_producer_queue
            self._LastError_current_value = LastError
        queue.put(LastError)

    def LastError_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[Error]]:
        """
        The most recent error that occurred.

        This method is called when a client subscribes to the observable property 'LastError'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def abort_LastError_subscriptions(self, error: Exception, queue: Optional[Queue[Error]] = None) -> None:
        """
        The most recent error that occurred.

        This method aborts subscriptions to the observable property 'LastError'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._LastError_producer_queue
        queue.put(error)

    @property
    def current_LastError(self) -> Error:
        try:
            return self._LastError_current_value
        except AttributeError:
            raise AttributeError("Observable property LastError has never been set")

    @abstractmethod
    def ClearAllErrors(self, *, metadata: MetadataDict) -> ClearAllErrors_Responses:
        """
        Clears all errors


        :param metadata: The SiLA Client Metadata attached to the call

        """
        pass
