# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from concurrent.futures import Executor
from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstance

from sila_cetoni.application.system import ApplicationSystem, CetoniApplicationSystem

from ..generated.shutdowncontroller import PrepareShutdown_Responses, Shutdown_Responses, ShutdownControllerBase

if TYPE_CHECKING:
    from ..server import Server


@CetoniApplicationSystem.monitor_traffic
class ShutdownControllerImpl(ShutdownControllerBase):
    __executor: Executor

    def __init__(self, parent_server: Server, executor: Executor) -> None:
        super().__init__(parent_server=parent_server)

        self.__executor = executor

    def PrepareShutdown(
        self, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> PrepareShutdown_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        # nothing to do here
        return PrepareShutdown_Responses()

    def Shutdown(self, *, metadata: MetadataDict, instance: ObservableCommandInstance) -> Shutdown_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        # use the `Executor` so that this Command can be finished successfully (calling `shutdown` directly would abort
        # the underlying RPC immediately)
        self.__executor.submit(ApplicationSystem().shutdown)  # type: ignore
        return Shutdown_Responses()
